{% extends 'base.html.twig' %}

{% block title %}Bookprofile{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/bookprofile.css') }}">
    <link rel="stylesheet" href="{{ asset('css/home.css') }}">
{% endblock %}

{% block javascripts %}
    {{ encore_entry_script_tags('app') }}
    <script src="{{ asset('js/home.js') }}"></script>
    <script src="{{ asset('js/bookprofile.js') }}"></script>
    <script>
        window.addEventListener('DOMContentLoaded', function() {
            var isbn = "{{ isbn }}"; // Pass the `isbn` variable from Twig to JavaScript
            initializeBookProfile(isbn); // Call a function defined in the separate JavaScript file
        });
    </script>
{% endblock %}




{% block main %}


    <section class="Book">

        <div>
            <img id="book_img" alt="Book cover">
            <button id="favorite_button" onclick="handleFavorite('{{ isbn }}', '{{ title }}', this)">Favorite!!</button>
        </div>


        <div class="Information">
            <h2 id="book_title"></h2>
            <h3 id="author"></h3>

            <h4>Genres</h4>
            <div class="Genres">
                <p id="genres">Young Adult, Fiction</p>
            </div>

            <div class="Description">
                <h4>Description</h4>
                <p id="description"></p>
            </div>


            <div class="Details">
                <div class="row">
                    <div class="Specifications">
                        <h5>ISBN</h5>
                        <p id="isbn">{{ isbn }}</p>
                    </div>
                    <div class="Specifications">
                        <h5>Print length</h5>
                        <p id="pages"></p>
                    </div>
                    <div class="Specifications">
                        <h5>Publication date</h5>
                        <p id="publication_date"></p>
                    </div>
                    <div class="Specifications">
                        <h5>Language</h5>
                        <p id="language"></p>
                    </div>
                </div>



            </div>

            <a href="/peoplelist/{{ isbn }}"><button type="button" style="font-size: 15px"> <i class='fas fa-user-alt'></i> <b> People who liked this book</b>  </button></a>
{#            <a href="/people-like/{{ isbn }}"><button type="button" style="font-size: 15px"> <i class='fas fa-user-alt'></i> <b> People who liked this book</b>  </button></a>#}
            <button type="button" style="font-size: 15px"> <i class='fas fa-user-alt'></i> <b> People who are reading this book</b>  </button>


            </div>
        </div>

        <i style="font-size: 50px" onclick="likeDislike(this)" class="far fa-heart"></i>


    </section>


    <script>
        // Call the function when the page is loaded
        window.addEventListener('DOMContentLoaded', function() {
            var isbn = "{{ isbn }}";  // Replace with your ISBN

            // check if the book has already been favorited and set the text on the button based on that
            const fav_button = document.getElementById("favorite_button");
            checkFavoriteStatus('{{ isbn }}', fav_button);

            // Fetch the book image from Google Books API
            fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${isbn}`)
                .then(response => response.json())
                .then(data => {
                    // Extract the image links from the API response
                    const book = data.items[0].volumeInfo;
                    const title = book.title;
                    const author = book.authors ? book.authors[0] : "Unknown";
                    const genres = book.categories ? book.categories.join(', ') : "Unknown";
                    const description = book.description ? book.description : "No description available";
                    const pages = book.pageCount ? book.pageCount : "Unknown";
                    const publicationDate = book.publishedDate ? book.publishedDate : "Unknown";
                    const language = book.language ? book.language : "Unknown";

                    imageLink = book.imageLinks ? book.imageLinks.thumbnail : asset('images/no-image-available.png');


                    // Update the image source in the HTML
                    document.getElementById('book_img').src = imageLink;

                    document.getElementById('book_title').textContent = title;
                    document.getElementById('author').textContent = "Author: " + author;
                    document.getElementById('genres').textContent =  genres;
                    document.getElementById('description').textContent = description;
                    document.getElementById('pages').textContent = pages;
                    document.getElementById('publication_date').textContent = publicationDate;
                    document.getElementById('language').textContent = language;
                })
                .catch(error => console.log(error));
        });


        function handleFavorite(bookId, title, buttonElement) {
            // Send HTTP POST request to your Symfony backend endpoint
            fetch(`/favorite-book/${bookId}/${title}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ bookId: bookId }),
            })
                .then(response => response.json())
                .then(data => {
                    // Check the response message and update the button accordingly
                    if (data.message === 'Book favorited successfully') {
                        buttonElement.textContent = 'Unfavorite';
                        // Add any additional styling or behavior changes as needed
                    } else if (data.message === 'Book unfavorited successfully') {
                        buttonElement.textContent = 'Favorite';
                        // Add any additional styling or behavior changes as needed
                    } else {
                        // Handle other possible response messages or errors
                    }
                })
                .catch(error => {
                    // Handle any errors that occur during the request
                });
        }

        // Function to check the favorite status of a book
        function checkFavoriteStatus(bookId, buttonElement) {
            fetch(`/check-favorite-book/${bookId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Book already favorited') {
                        buttonElement.textContent = 'Unfavorite';
                    } else if (data.message === 'Book not favorited') {
                        buttonElement.textContent = 'Favorite';
                        // Add any additional styling or behavior changes as needed
                    } else {
                        // Handle other possible response messages or errors
                    }
                })
                .catch(error => {
                    // Handle any errors that occur during the request
                });
        }

    </script>

{% endblock %}
