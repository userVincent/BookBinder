#define the base docker image file used for all jobs
image: composer:2.5

stages:
  - test
  - deploy
test-job:
  stage: test
  image: ubuntu

  services:
    # a container with a temporary mysql db for running unit tests
    - mysql:8
  variables:
    # environment variables for configuring the mysql test database container
    MYSQL_DATABASE: a22web38_test
    MYSQL_USER: test_user
    MYSQL_ROOT_PASSWORD: root_pass
    MYSQL_PASSWORD: test_pass
    # set the correct DSN in Symfony to connect to the temporary database
    DATABASE_URL: "mysql://test_user:test_pass@mysql/a22web38_test?serverVersion=8&charset=utf8mb4"
    # PANTHER_CHROME_DRIVER_BINARY: /usr/bin/chromedriver

  # before starting the test scripts, add specific software to the container (only for this job)
  before_script:
    - apt-get update
    - apt-get install software-properties-common -y
    - ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
    - apt-get install curl wget php php-cli php8.1 php8.1-common php8.1-curl php8.1-intl php8.1-xml php8.1-opcache php8.1-mbstring php8.1-zip libfontconfig1 fontconfig libxrender-dev libfreetype6 libxrender1 zlib1g-dev xvfb -y -qq
    # mysql PDO needs to be installed as a PHP extension in the container for the tests to run
    # Install chromium snap package
    - apt-get install php-mysql -y
    - apt-get update
    - wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt-get install ./google-chrome-stable_current_amd64.deb -y
    # Retrieve Google Chrome version
    - CHROME_VERSION=$(google-chrome-stable --version | awk '{print $3}')
    # Construct ChromeDriver download URL
    - CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com/${CHROME_VERSION}/chromedriver_linux64.zip"
    # Download and install ChromeDriver
    - wget $CHROMEDRIVER_URL
    - unzip chromedriver_linux64.zip
    - mv chromedriver /usr/bin/chromedriver
    - export PANTHER_NO_SANDBOX=1
    - export PANTHER_WEB_SERVER_PORT=9080
    - export PANTHER_CHROME_DRIVER_BINARY=/usr/bin/chromedriver
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
    - composer install
    - uname -m



  script:
    - composer install
    # run the migration on the temporary database
    - php bin/console doctrine:migrations:migrate
    # load some test data in the temporary database
    - php bin/console doctrine:fixtures:load -n
    # run the tests (using the temporary database)
    - php bin/phpunit
    #generate report
    - vendor/bin/phpunit --log-junit report.xml

  artifacts:
    when: always
    reports:
      junit: report.xml

deploy-job:
# run this job only when there is a push on the master branch
    stage: deploy
    only:
        - master
    image: composer:2.5
  # Before we start any job, prepare the container with some extra configuration
  # e.g. setting the ssh credentials, so we can later copy to shell.studev.groept.be
    before_script:
      # create a local .ssh folder in the container
      - mkdir -p ~/.ssh
      # start the ssh-agent and add the private key to the system
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | ssh-add -
      # add the fingerprint for shell.studev.groept.be as a trusted host
      - ssh-keyscan shell.studev.groept.be > ~/.ssh/known_hosts
      # install rsync to copy files to the web server
      # this container runs Alpine Linux, where apk is the package manager (not apt-get)
      - apk add rsync
  # Every job will start a container with a clone from the current repo
    script:
        - composer install
# rsync is a copy/sync tool we use to copy the current folder ./ to studev
# we ignore the .git folder and the .env file
# we delete the files on the remote server that are not present in the local copy 
        - rsync -rv --exclude=".git/"
                    --exclude=".env"
                    --delete
                    ./ a22web38@shell.studev.groept.be:/var/www/html